var searchIndex = JSON.parse('{\
"cry":{"doc":"Cry is a advance cryptography library based on ECC and …","t":[0,0,0,0,0,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,8,8,6,16,10,10,10,8,16,10,10,10,10,10,10,10,10,12,8,3,18,16,10,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,10,11,12,18,3,8,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,10,11,10,11,10,11,11,11,11,11,11,11,11,11,11,10,11,8,10,10,10,10,10,10,10,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11],"n":["dh","key","primitive","ristretto255","schnorr","SharedKey","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","key","ne","new","to_owned","try_from","try_into","type_id","BarePublicKey","Keypair","PublicKey","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","code","code","derive","derive","fmt","from","from","from","from_keypair","from_keypair","into","into","into","new","public","public","public","secret","seed","to_bare_public","to_bare_public","to_owned","to_public","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","bytes","digest","point","scalar","sponge","Bytes","FromBytesRef","Output","OutputSize","from_bytes","from_bytes_ref","to_bytes","Digest","OutputSize","chain","digest","finalize","finalize_reset","new","output_size","reset","update","0","DisLogPoint","Point","SIZE","Scalar","add","add","add","add_assign","basepoint","basepoint","borrow","borrow_mut","clone","clone_into","eq","eq","fmt","from","from_bytes","into","mul","mul","mul","mul_assign","neg","neg","one","one","sub","sub","sub","sub_assign","to_bytes","to_owned","try_from","try_into","type_id","zero","zero","0","SIZE","Scalar","ScalarNumber","add","add","add","add_assign","add_assign","borrow","borrow_mut","clone","clone_into","fmt","from","from_bytes","from_bytes_ref","into","invert","mul","mul","mul","mul","mul","mul_assign","mul_assign","neg","neg","one","one","reduce","sub","sub","sub","sub_assign","sub_assign","to_bytes","to_owned","try_from","try_into","type_id","zero","zero","Sponge","absorb","clear","n","permute","position","r","squeeze","0","0","Point","Scalar","add","add","basepoint","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","from_bytes","from_bytes","from_bytes_ref","into","into","invert","mul","mul","ne","neg","neg","one","one","reduce","sub","to_bytes","to_bytes","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","zero","zero","R","Signature","borrow","borrow_mut","clone","clone_into","fmt","from","into","s","sign","sign_multi_party","sign_multi_party_complete","to_owned","try_from","try_into","type_id","verify"],"q":["cry","","","","","cry::dh","","","","","","","","","","","","","","","","cry::key","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cry::primitive","","","","","cry::primitive::bytes","","","","","","","cry::primitive::digest","","","","","","","","","","cry::primitive::point","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cry::primitive::scalar","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cry::primitive::sponge","","","","","","","","cry::ristretto255","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cry::schnorr","","","","","","","","","","","","","","","","",""],"d":["","Define some type about asymmetric and symmetric key.","Define primitives for cry.","","Schnorr signature and schnorr multi-signature.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Define serialize and deserialize behavior.","Define hash function behavior.","Define Point behavier.","Define scalar behavior.","Define sponge function behavior.","Convert data format between bytes and struct.","","","","Generate A type from bytes.","","Convert A type to bytes.","Re-export digest.","Output size for <code>Digest</code>","Digest input data in a chained manner.","Convenience function to compute hash of the <code>data</code>. It will …","Retrieve result and consume hasher instance.","Retrieve result and reset hasher instance.","Create new hasher instance","Get output size of the hasher","Reset hasher instance to its initial state.","Digest data, updating the internal state.","","Point operator for this curve on finite finite $G_p$","Point wraper type.","Point size in bytes.","This point type’s associated scalar type.","Add two point.","","","","Get a base point for this curve.","Get basepoint.","","","","","Two point is equal.","","","","","","Scalar multiply for point.","","","","Negative a point.","","Get a point means one.","Get 1.","Subtraction two point.","","","","","","","","","Get a point means zero.","Get 0.","","","Scalar wraper types.","Scalar operator for this curve on finite finite $G_p$","Add two scalar.","","","","","","","","","","","","","","Invert a scalar.","Multiply two scalar.","","","","","","","Negative a scalar.","","Get 1.","Get 1.","Reduce a scalar by $p$ in $G_p$","Subtraction two scalar.","","","","","","","","","","Get 0.","Get 0.","Define permutation function.","Absorb data into state.","Set state all zero.","Get total state size.","Permute state.","Get postion of state.","Get operatalbe state size.","Squeeze data from state.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Schorr Signature","","","","","","","","","Create signature from keypair and message.","","","","","","","Verify signature"],"i":[0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,2,3,4,2,3,4,4,4,2,4,2,4,4,2,3,4,2,3,2,3,4,4,2,3,4,4,4,2,4,4,4,2,3,4,2,3,4,2,3,4,0,0,0,0,0,0,0,0,5,5,6,5,0,7,7,7,7,7,7,7,7,7,8,0,0,9,9,9,8,8,8,9,8,8,8,8,8,9,8,8,8,8,8,9,8,8,8,9,8,9,8,9,8,8,8,8,8,8,8,8,9,8,10,11,0,0,11,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,10,10,10,10,10,10,11,10,11,10,11,11,10,10,10,10,10,10,10,10,10,11,10,0,12,12,12,12,12,12,12,13,14,0,0,13,14,13,13,14,13,14,13,14,13,14,13,13,13,14,13,14,13,14,14,13,14,14,13,14,13,13,14,13,14,14,14,13,14,13,14,13,14,13,14,13,14,13,14,15,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],"f":[null,null,null,null,null,null,[[]],[[]],[[],["sharedkey",3]],[[]],[[["sharedkey",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],null,[[["sharedkey",3]],["bool",15]],[[["barepublickey",3],["keypair",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["keypair",3]],[[]],null,null,[[["output",6]]],[[["output",6]]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["keypair",3]]],[[["keypair",3]]],[[]],[[]],[[]],[[["output",6]]],null,null,null,null,null,[[],["barepublickey",3]],[[],["barepublickey",3]],[[]],[[],["publickey",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,[[["output",6]]],[[],["option",4]],[[],["output",6]],null,null,[[]],[[],[["u8",15],["genericarray",3,["u8"]]]],[[],[["u8",15],["genericarray",3,["u8"]]]],[[],[["u8",15],["genericarray",3,["u8"]]]],[[]],[[],["usize",15]],[[]],[[]],null,null,null,null,null,[[]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["point",3]]],[[]],[[]],[[]],[[]],[[],["point",3]],[[]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["output",6]]],[[]],[[]],[[["scalar",3]],["point",3]],[[["scalar",3]],["point",3]],[[["scalar",3]]],[[]],[[]],[[]],[[]],[[]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["point",3]]],[[],["output",6]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,null,null,null,[[]],[[["scalar",3]],["scalar",3]],[[["scalar",3]],["scalar",3]],[[["scalar",3]]],[[["scalar",3]]],[[]],[[]],[[],["scalar",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[["output",6]]],[[],["option",4]],[[]],[[]],[[]],[[["point",3]],["point",3]],[[["scalar",3]],["scalar",3]],[[["scalar",3]],["scalar",3]],[[["point",3]],["point",3]],[[["scalar",3]]],[[["scalar",3]]],[[]],[[],["scalar",3]],[[]],[[]],[[]],[[]],[[["scalar",3]],["scalar",3]],[[["scalar",3]],["scalar",3]],[[["scalar",3]]],[[["scalar",3]]],[[],["output",6]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,[[["bool",15]]],[[]],[[],["usize",15]],[[]],[[],["usize",15]],[[],["usize",15]],[[["bool",15]]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["point",3]],[[],["scalar",3]],[[]],[[]],[[["point",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["output",6]]],[[["output",6]]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[["point",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["output",6]],[[],["output",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,[[]],[[]],[[],["signature",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],null,[[["keypair",3]],["signature",3]],[[["keypair",3]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["barepublickey",3]],["bool",15]]],"p":[[3,"SharedKey"],[3,"PublicKey"],[3,"BarePublicKey"],[3,"Keypair"],[8,"Bytes"],[8,"FromBytesRef"],[8,"Digest"],[3,"Point"],[8,"DisLogPoint"],[3,"Scalar"],[8,"ScalarNumber"],[8,"Sponge"],[3,"Point"],[3,"Scalar"],[3,"Signature"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};