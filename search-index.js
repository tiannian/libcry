var searchIndex = JSON.parse('{\
"cry":{"doc":"Cry is a advance cryptography library based on ECC and …","t":[0,3,12,11,0,3,11,3,11,3,11,3,11,5,5,5,5,0,3,12,12,12,12,3,12,12,3,12,0,0,6,8,16,10,10,8,10,0,8,16,10,10,10,10,10,10,10,10,0,8,18,16,10,10,10,10,10,10,10,11,3,12,11,11,11,0,8,18,10,10,10,10,10,10,10,11,3,12,11,11,0,8,10,10,10,10,10,10,10,0,3,12,3,12,0,3,12,12,11,11,11,11,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["dh","SharedKey","key","new","keccak","KeccakF1600","new","KeccakF800","new","KeccakF400","new","KeccakF200","new","keccakf1600","keccakf800","keccakf400","keccakf200","key","Keypair","seed","code","secret","public","PublicKey","code","public","BarePublicKey","public","primitive","bytes","Output","Bytes","OutputSize","from_bytes","to_bytes","FromBytesRef","from_bytes_ref","digest","Digest","OutputSize","new","update","chain","finalize","finalize_reset","reset","output_size","digest","point","DisLogPoint","SIZE","Scalar","zero","one","basepoint","add","mul","neg","eq","sub","Point","0","zero","one","basepoint","scalar","ScalarNumber","SIZE","zero","one","invert","reduce","neg","add","mul","sub","Scalar","0","zero","one","sponge","Sponge","r","n","position","permute","squeeze","absorb","clear","ristretto255","Point","0","Scalar","0","schnorr","Signature","R","s","sign","sign_multi_party","sign_multi_party_complete","verify","strobe","Strobe","new","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_bytes","from_bytes","to_bytes","from_bytes","from_bytes","to_bytes","to_bytes","from_bytes","from_bytes_ref","from_bytes_ref","zero","one","basepoint","add","mul","neg","eq","zero","one","invert","reduce","neg","add","mul","sub","position","r","n","permute","absorb","squeeze","clear","position","r","n","permute","absorb","squeeze","clear","position","r","n","permute","absorb","squeeze","clear","position","r","n","permute","absorb","squeeze","clear","fmt","fmt","fmt","fmt","fmt","fmt","fmt","sub","sub","sub","sub","eq","ne","eq","eq","ne","add","add","add","add","mul","mul","mul","mul","mul","mul","neg","neg","add_assign","add_assign","add_assign","sub_assign","sub_assign","sub_assign","mul_assign","mul_assign","mul_assign","clone","clone","clone","clone","clone","clone","clone","new","to_public","to_bare_public","derive","from_keypair","derive","to_bare_public","from_keypair"],"q":["cry","cry::dh","","","cry","cry::keccak","","","","","","","","","","","","cry","cry::key","","","","","","","","","","cry","cry::primitive","cry::primitive::bytes","","","","","","","cry::primitive","cry::primitive::digest","","","","","","","","","","cry::primitive","cry::primitive::point","","","","","","","","","","","","","","","","cry::primitive","cry::primitive::scalar","","","","","","","","","","","","","","cry::primitive","cry::primitive::sponge","","","","","","","","cry","cry::ristretto255","","","","cry","cry::schnorr","","","","","","","cry","cry::strobe","","cry::dh","","","","","","","","","cry::keccak","","","","","","","","","","","","","","","","","","","","","","","","","","","","cry::key","","","","","","","","","","","","","","","","","","","","","","","cry::primitive::point","","","","","","","","","cry::primitive::scalar","","","","","","","","","cry::ristretto255","","","","","","","","","","","","","","","","","","cry::schnorr","","","","","","","","","cry::strobe","","","","","","","cry::primitive::point","","cry::primitive::scalar","","cry::ristretto255","","","","cry::primitive::scalar","cry::ristretto255","","","","","","","","","","","","","","","","cry::keccak","","","","","","","","","","","","","","","","","","","","","","","","","","","","cry::dh","cry::key","cry::primitive::point","cry::primitive::scalar","cry::ristretto255","","cry::schnorr","cry::primitive::point","","cry::primitive::scalar","","cry::dh","","cry::primitive::point","cry::ristretto255","","cry::primitive::point","","cry::primitive::scalar","","cry::primitive::point","","cry::primitive::scalar","","","","cry::primitive::point","cry::primitive::scalar","cry::primitive::point","cry::primitive::scalar","","cry::primitive::point","cry::primitive::scalar","","cry::primitive::point","cry::primitive::scalar","","cry::dh","cry::key","cry::primitive::point","cry::primitive::scalar","cry::ristretto255","","cry::schnorr","cry::key","","","","","","",""],"d":["","","","","An implementation of the keccak-F[1600,800,400,200].","","","","","","","","","keccak-f[1600]","keccak-f[800]","keccak-f[400]","keccak-f[200]","Define some type about asymmetric and symmetric key.","","","","","","","","","","","Define primitives for cry.","Define serialize and deserialize behavior.","","Convert data format between bytes and struct.","","Generate A type from bytes.","Convert A type to bytes.","","","Define hash function behavior.","Re-export digest.","Output size for <code>Digest</code>","Create new hasher instance","Digest data, updating the internal state.","Digest input data in a chained manner.","Retrieve result and consume hasher instance.","Retrieve result and reset hasher instance.","Reset hasher instance to its initial state.","Get output size of the hasher","Convenience function to compute hash of the <code>data</code>. It will …","Define Point behavier.","Point operator for this curve on finite finite $G_p$","Point size in bytes.","This point type’s associated scalar type.","Get a point means zero.","Get a point means one.","Get a base point for this curve.","Add two point.","Scalar multiply for point.","Negative a point.","Two point is equal.","Subtraction two point.","Point wraper type.","","Get 0.","Get 1.","Get basepoint.","Define scalar behavior.","Scalar operator for this curve on finite finite $G_p$","","Get 0.","Get 1.","Invert a scalar.","Reduce a scalar by $p$ in $G_p$","Negative a scalar.","Add two scalar.","Multiply two scalar.","Subtraction two scalar.","Scalar wraper types.","","Get 0.","Get 1.","Define sponge function behavior.","Define permutation function.","Get operatalbe state size.","Get total state size.","Get postion of state.","Permute state.","Squeeze data from state.","Absorb data into state.","Set state all zero.","","","","","","Schnorr signature and schnorr multi-signature.","Schorr Signature","","","Create signature from keypair and message.","","","Verify signaturei":[0,0,1,1,0,0,2,0,3,0,4,0,5,0,0,0,0,0,0,6,6,6,6,0,7,7,0,8,0,0,0,0,9,9,9,0,10,0,0,11,11,11,11,11,11,11,11,11,0,0,12,12,12,12,12,12,12,12,12,12,0,13,13,13,13,0,0,14,14,14,14,14,14,14,14,14,0,15,15,15,0,0,16,16,16,16,16,16,16,0,0,17,0,18,0,0,19,19,19,19,19,19,0,0,20,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,13,13,13,13,13,13,13,13,13,15,15,15,15,15,15,15,15,15,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,13,13,15,15,17,17,18,18,15,18,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,1,6,13,15,17,18,19,13,13,15,15,1,1,13,17,17,13,13,15,15,13,13,15,15,15,15,13,15,13,15,15,13,15,15,13,15,15,1,6,13,15,17,18,19,6,6,6,6,7,7,7,8],"f":[null,null,null,[[["barepublickey",3],["keypair",3]]],null,null,[[]],null,[[]],null,[[]],null,[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["output",6]]],[[],["output",6]],null,[[],["option",4]],null,null,null,[[]],[[]],[[]],[[],[["genericarray",3],["u8",15]]],[[],[["genericarray",3],["u8",15]]],[[]],[[],["usize",15]],[[],[["genericarray",3],["u8",15]]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],null,null,[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],null,null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[["bool",15]]],[[["bool",15]]],[[]],null,null,null,null,null,null,null,null,null,[[["keypair",3]],["signature",3]],[[["keypair",3]]],[[]],[[["barepublickey",3]],["bool",15]],null,null,[[["usize",15]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["output",6]],[[["output",6]]],[[],["output",6]],[[["output",6]]],[[["output",6]]],[[],["output",6]],[[],["output",6]],[[["output",6]]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[["bool",15]]],[[["bool",15]]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[["bool",15]]],[[["bool",15]]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[["bool",15]]],[[["bool",15]]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[["bool",15]]],[[["bool",15]]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["scalar",3]],["scalar",3]],[[["scalar",3]],["scalar",3]],[[["sharedkey",3]],["bool",15]],[[["sharedkey",3]],["bool",15]],[[],["bool",15]],[[["point",3]],["bool",15]],[[["point",3]],["bool",15]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["scalar",3]],["scalar",3]],[[["scalar",3]],["scalar",3]],[[["scalar",3]],["point",3]],[[["scalar",3]],["point",3]],[[["scalar",3]],["scalar",3]],[[["scalar",3]],["scalar",3]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[]],[[],["scalar",3]],[[["point",3]]],[[["scalar",3]]],[[["scalar",3]]],[[["point",3]]],[[["scalar",3]]],[[["scalar",3]]],[[["scalar",3]]],[[["scalar",3]]],[[["scalar",3]]],[[],["sharedkey",3]],[[],["keypair",3]],[[],["point",3]],[[],["scalar",3]],[[],["point",3]],[[],["scalar",3]],[[],["signature",3]],[[["output",6]]],[[],["publickey",3]],[[],["barepublickey",3]],[[["output",6]]],[[["keypair",3]]],[[["output",6]]],[[],["barepublickey",3]],[[["keypair",3]]]],"p":[[3,"SharedKey"],[3,"KeccakF1600"],[3,"KeccakF800"],[3,"KeccakF400"],[3,"KeccakF200"],[3,"Keypair"],[3,"PublicKey"],[3,"BarePublicKey"],[8,"Bytes"],[8,"FromBytesRef"],[8,"Digest"],[8,"DisLogPoint"],[3,"Point"],[8,"ScalarNumber"],[3,"Scalar"],[8,"Sponge"],[3,"Point"],[3,"Scalar"],[3,"Signature"],[3,"Strobe"]]}\
}');
initSearch(searchIndex);